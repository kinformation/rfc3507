





Network Working Group                                           J. Elson
Request for Comments: 3507                                      A. Cerpa
Category: Informational                                             UCLA
                                                              April 2003

              Internet Content Adaption Protocol (ICAP)

この文書の位置付け

   この文書は、インターネットコミュニティに情報を提供する。この文書はいかなるイ
   ンターネット標準も指定していない。この文書の配布に制限はない。

著作権表示

   Copyright (C) The Internet Society (2003).  All Rights Reserved.

IESGに関する注意事項

   Open Pluggable Services (OPES) ワーキンググループは、ICAP と同じ機能を実現す
   るプロトコルの標準化過程プロトコル仕様を作成することを公認されている。しかし、
   ICAP は既に広く使用されているため、IESG は情報文書として ICAP 仕様を公開し、
   これまでの使用方法を文書化することが適切であると考えている。また、ICAP は RFC
    3238 の公開前に開発されたため、その文書で説明されているアーキテクチャ上およ
    びポリシー上の問題に対処していないことにも注意すること。

概要

   ICAP (Internet Content Adaption Protocol) は、HTTP サービスのための単純なオブ
   ジェクトベースのコンテンツベクタリングを提供することを目的としたプロトコルで
   ある。本質的には、ICAP は HTTP メッセージで"リモートプロシージャコール"を実行
   するための軽量プロトコルである。ICAP クライアントは、何らかの変換やその他処理
    ("改編") のために HTTP メッセージを ICAP サーバに渡すことができる。サーバは
    メッセージに対して変換サービスを実行し、通常は変更されたメッセージとともにレ
    スポンスをクライアントへ応答する。通常、改編されるメッセージは HTTP リクエス
    トまたは HTTP レスポンスのどちらかである。



Elson & Cerpa                Informational                      [Page 1]

RFC 3507                          ICAP                        April 2003


目次

   1.   導入....................................................3
   2.   専門用語................................................5
   3.   ICAP の全体動作.........................................8
        3.1   リクエストの変更..................................8
        3.2   レスポンスの変更.................................10
   4.   プロトコル意味論.......................................11
        4.1   一般的な動作.....................................11
        4.2   ICAP URI.........................................11
        4.3   ICAP ヘッダ......................................12
              4.3.1   リクエストとレスポンスの共通ヘッダ.......12
              4.3.2   リクエストヘッダ.........................13
              4.3.3   レスポンスヘッダ.........................14
              4.3.4   HTTP メッセージ内の ICAP に関するヘッダ..15
        4.4   ICAP ボディ: HTTP メッセージのカプセル化.........16
              4.4.1   "Encapsulated"ヘッダ.....................16
              4.4.2   カプセル化された HTTP ヘッダ.............18
        4.5   メッセージプレビュー.............................18
        4.6   Preview 以外での"204 No Content"レスポンス.......22
        4.7   ISTag レスポンスヘッダ...........................22
        4.8   リクエスト変更 (Request Modification) モード.....23
              4.8.1   リクエスト...............................23
              4.8.2   レスポンス...............................24
              4.8.3   用例.....................................24
        4.9   レスポンス変更 (Response Modification) モード....27
              4.9.1   リクエストt..............................27
              4.9.2   レスポンス...............................27
              4.9.3   用例.....................................28
        4.10   OPTIONS メソッド................................29
              4.10.1  OPTIONS リクエスト.......................29
              4.10.2  OPTIONS レスポンス.......................30
              4.10.3  OPTIONS 用例.............................33
   5.   キャッシング...........................................33
   6.   実装上の注意事項.......................................34
        6.1   ベクトル化ポイント...............................34
        6.2   アプリケーションレベルのエラー...................35
        6.3   チャンク転送エンコーディングの使用...............37
        6.4   個別サービス用の個別 URI.........................37
   7.   セキュリティ上の考慮事項...............................37
        7.1   認証.............................................37
        7.2   暗号化...........................................38
        7.3   サービス検証.....................................38
   8.   動機と設計の選択肢.....................................39
        8.1   HTTP であるべきか、あらざるべきか................39
        8.2   チャンク化の必須使用.............................39
        8.3   Encapsulated ヘッダでの null-body ディレクティ
              ブの使用.........................................40
   9.   参照文献...............................................40
   10.  寄稿者.................................................41
   付録 A   ICAP メッセージの BNF 文法.........................45
   著者のアドレス..............................................48
   著作権表示全文..............................................49



Elson & Cerpa                Informational                      [Page 2]

RFC 3507                          ICAP                        April 2003


1.  導入

   インターネットが成長するにつれて、拡張性のあるインターネットサービスも必要と
   なる。Webサーバは、増大する帯域幅に接続した何億ものユーザへコンテンツを配信す
   るよう求められている。すべてのクライアントのリクエストのあらゆる側面において
   責任を負う単一の集中型サーバモデルでは、限界が近づいていると思われる。

   クライアント数の増加に追従するため、レプリケーション、ディストリビューション、
   およびキャッシングを使用した、より優れた規模のアーキテクチャへの移行が進んで
   る。コンテンツプロバイダ側では、レプリケーションとロードバランシングの技法に
   より、クライアントのリクエストの負荷を多数のサーバに分散させることができる。
   コンテンツプロバイダはまた、オリジンサーバをクライアントが接続されているネッ
   トワークの"エッジ"に近づける、地理的に多様なコンテンツ配信ネットワークを展開
   し始めている。分散オリジンサーバまたは"サロゲート"であるこれらのネットワーク
   は、コンテンツプロバイダがそのコンテンツの完全性に対する制御を維持しながらそ
   れらのコンテンツを配信することを可能にする。このような配置の分散性とエンド
   ユーザに対する特定のサロゲートの近接性により、コンテンツプロバイダは、たとえ
   ば単一の集中型サービスでは困難であった地域で追加のサービスをユーザに提供する
   ことができるようになる。

   ICAP (Internet Content Adaption Protocol) は、HTTPサービスのための単純なオブ
   ジェクトベースのコンテンツベクタリングを提供することを目的としたプロトコルで
   ある。本質的には、ICAP は HTTP メッセージで"リモートプロシージャコール"を実行
   するための軽量プロトコルである。ICAP クライアントは、何らかの変換やその他処理
   ("改編") のために HTTP メッセージを ICAP サーバに渡すことができる。サーバは
   メッセージに対して変換サービスを実行し、通常は変更されたメッセージとともにレ
   スポンスをクライアントへ応答する。改編されるメッセージは、HTTP リクエストまた
   は HTTP レスポンスのどちらかである。変換は非 HTTP コンテンツでも可能かもしれ
   ないが、それはこの文書では対象としない。

   このようなリモートプロシージャコール (RPC) は、さまざまな面で役立つ。例えば、



Elson & Cerpa                Informational                      [Page 3]

RFC 3507                          ICAP                        April 2003


   o  オリジンサーバにオブジェクトの更新されたコピーを要求する代わりに、コンテン
      ツの簡単な変換をネットワークのエッジ近くで実行することができる。たとえば、
      コンテンツプロバイダは、ページが表示されるたびに人気のあるWebページに別の
      広告を提供したい場合がある。現状、コンテンツプロバイダは、このようなページ
      はキャッシュ不可としてマークし、ユーザの Cookie を追跡することによってこの
      方針を実装している。これにより、オリジンサーバとネットワークに追加の負荷が
      かかる。我々のアーキテクチャでは、ページはネットワークのエッジの近くで一度
      キャッシュされる可能性がある。これらのエッジキャッシュは、ページがクライア
      ントに配信されるたびに、近くの広告挿入サーバへ ICAP 呼び出しが使用できる。

   他にも、 (コンテンツ配信ネットワークのように) コンテンツプロバイダとの連携や、
   (サロゲートのように) クライアントのネットワークプロバイダが提供する付加価値
   サービスとして、エッジサーバによる変換が可能である。これらの変換の例は、ウェ
   ブページの翻訳や、(PDA ベースまたは携帯電話ベースのブラウザなど) 特別な物理的
   装置に適したフォーマットへの変換である。

   o  サロゲートサーバまたはオリジンサーバは、代わりに他のサーバに作業を移譲する
      ことにより、高度な処理の実行を避けることができる。これにより、複数マシンに
      負荷を分散できる。例えば、ユーザがサロゲート (キャッシングプロキシなど) を
      介して実行プログラムをダウンロードしようとしている場合、ICAP クライアント
      として機能するサロゲートは、実行可能ファイルのキャッシュの受け入れ前に、実
      行可能ファイルのウィルスチェックを外部サーバに依頼することができる。

   o  ファイアウォールまたはサロゲートは ICAP クライアントとして機能し、リクエス
      ト内のURIが許可されていることを確認するサービスに発信リクエストを送信でき
      る (たとえば、子供が閲覧するWebコンテンツのペアレンタルコントロールを許可
      するシステムなど) 。この場合、レスポンスとして返されるのはオブジェクトでは
      なく、改編された"リクエスト"である。

   これらすべての例において、ICAP はオリジンサーバやサロゲート、ネットワーク自体
   の負荷軽減および分散に役立つ。場合によっては、ICAP によりネットワークのエッジ
   付近における変換が容易になり、基となるコンテンツのキャッシュ性が向上する。他
   にも、オリジンサーバやサロゲートなどのデバイスは、高度な処理を他のマシンに分
   散させることで負荷を軽減することができる。すべての場合において、ICAP はまた、
   コンテンツ配布やサロゲートの付加価値サービスの追加における柔軟性を高めるため
   に、コンテンツ改編のための標準インタフェースを提供する。



Elson & Cerpa                Informational                      [Page 4]

RFC 3507                          ICAP                        April 2003


   我々のアーキテクチャには2つの主要コンポーネントがある。

   1. トランザクション意味論 -- "どのようにして改編を要求するのか？"

   2. ポリシー管理 -- "いつ、どのような改編を誰に要求するのか？"

   現在、ICAP はトランザクション意味論のみ定義している。この文書では、ICAP クラ
   イアントから ICAP サーバへの HTTP メッセージの送信方法、他のリソース固有のパ
   ラメータとともにリクエストされた ICAP リソースのURI指定方法、および改編された
   メッセージの受信方法を定義する。

  必要な構成要素ではあるが、ICAP により定義されているこのワイヤプロトコルは、2つ
  目の部分、つまりそれが動作する付属のアプリケーションフレームワークなしで、使用
  が制限されている。より難しいポリシーの問題は現在の ICAP プロトコルの範囲外であ
  るが、今後の作業で計画されている。

   初期の実装では、実装固有の手動設定をポリシーの定義に使用できることが望ましい。
   これには、改編を必要とするメッセージ、利用可能な改編リソースのURIなどを認識す
   る規則が含まれる。ICAP クライアントとサーバが相互運用するにあたり、ポリシー自
   体が一致しているならば、ポリシーの定義に使用する正確な仕様は実装間で一致して
   いる必要はない。

   重要:
      現時点では、ポリシーフレームワークがない場合、変換はコンテンツプロバイダま
      たはユーザ (あるいはその両方) の明示的な同意を得てメッセージに対してのみ実
      行されるべき (SHOULD) であることが強く推奨される (RECOMMENDED) 。どちらに
      も同意せずに変換サービスを展開すると、予期せぬ結果となる場合がある。これら
      の問題の詳細については、7章を参照すること。

   一般的なポリシー決定の全範囲がこれらの初期実装の実績を通してより完全に理解さ
   れるなら、このアーキテクチャに後続して追加のポリシー制御プロトコルが定義され
   るかもしれない。この将来のプロトコルはここで定義されたICAPトランザクションイ
   ンタフェースを補完する標準的なポリシー定義インタフェースを可能にするかもしれ
   ない。

2.  専門用語

   この文書中における "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", "OPTIONAL"という各キーワードは、
   BCP 14, RFC 2119 [2]にて記述されるように解釈される。



Elson & Cerpa                Informational                      [Page 5]

RFC 3507                          ICAP                        April 2003


   この文書で使用される特別な用語を以下に定義する。これらの用語の大部分はそのま
   ま HTTP/1.1 [4] から採用されており、参照のため以下に再掲する。読者が HTTP/1.1
   を完全に理解していることを前提としている。

   コネクション {connection}
      通信の目的で二つのプログラム間に確立されるトランスポート層の仮想通信路。

   メッセージ {message}
      HTTP/1.1 [4] の4章で定義される、構文を持ち構造化されたオクテットシーケンス
      からなり、接続を介して転送される、HTTP 通信での基本単位。

   リクエスト {request}
      HTTP/1.1 [4] の5章で定義される、HTTP リクエストメッセージ。

   レスポンス {response}
      HTTP/1.1 [4] の6章で定義される、HTTP レスポンスメッセージ。

   リソース {resource}
      HTTP/1.1 [4] の3.2章で定義される、URI によって判別されるネットワークデータ
      オブジェクト、あるいはサービス。リソースは複数の表現 (例えば、複数の言語、
      データフォーマット、サイズ、解像度等) で利用したり、別の方法で変更したりで
      きる。

   クライアント {client}
      リクエストを送信する目的でコネクションを確立するプログラム。

   サーバ {server}
      レスポンスを送り返すことで、リクエストを処理するためのコネクションを受け入
      れるようなアプリケーションプログラム。プログラムの中にはクライアントとサー
      バの両方の機能を持つものがある。しかし、ここではこの用語を、一般的なプログ
      ラムの機能というよりむしろ、特定のコネクションについてプログラムによって果
      たされる役割のみのために使用する。同様に、各リクエストの性質に応じてその振
      る舞いを、オリジンサーバ、プロキシ、ゲートウェイ、トンネルと切り換えるサー
      バもある。

   オリジンサーバ {origin server}
      特定のリソースが存在する、または生成されるサーバ。



Elson & Cerpa                Informational                      [Page 6]

RFC 3507                          ICAP                        April 2003


   プロキシ {proxy}
      他のクライアントに代わってリクエストを送信するための、サーバとクライアント
      の両方として機能する中間プログラム。リクエストは内部で処理されるか、または
      可能であれば変換を伴って他のサーバーに渡される。プロキシは、本仕様のクライ
      アントとサーバの両方の要件を実装しなければいけない (MUST) 。

   キャッシュ {cache}
      プログラムのレスポンスメッセージのローカルストア、およびそのメッセージの格
      納、取得、削除を制御するサブシステム。以降の同じリクエストに対する応答時間
      とネットワーク帯域幅の消費を削減するため、キャッシュにキャッシュ可能なレス
      ポンスが格納される。どのようなクライアントやサーバであってもキャッシュを使
      用することができるが、トンネルとして機能しているサーバはキャッシュを使用で
      きない。

   キャッシュ可能 {cachable}
      レスポンスがキャッシュ可能とは、後続のリクエストへの応答に使用するため、
      キャッシュへのレスポンスメッセージのコピーの格納が許可されている、という意
      味である。HTTPレスポンスがキャッシュ可能かどうかを決めるための規則は [4]
      の13章に定義されている。リソースがキャッシュ可能であっても、キャッシュが
      キャッシュしたコピーを特定のリクエストに使用できるかどうかは、追加の制約が
      ある。

   サロゲート {surrogate}
      オリジンサーバと同じ場所、またはネットワーク内の別の場所に存在する、1つ以
      上のオリジンサーバの代理として、オリジンサーバと密接に連携して動作しうる
      ゲートウェイ。通常、レスポンスは内部キャッシュから配信される。サロゲートは、
      オリジンサーバ、または別のオリジンサーバの代表者からキャッシュエントリを取
      得できる。場合によっては、サロゲートがそのようなリクエストをトンネリングす
      ることもできる。

      オリジンサーバとサロゲートの間に密接な連携が存在する場合、[4] の Cache-
      Control ディレクティブを含むいくつかのプロトコル要件の修正が可能である。し
      かし、そのような修正はまだ完全には特定されていない。

      一般に"リバースプロキシ"および" (オリジン) サーバアクセラレータ"として知ら
      れる装置は、どちらもサロゲートをより正確に定義したものである。

   新しい定義:

   ICAP リソース {ICAP resource}
      上記の HTTP リソースと類似しているが、URI は HTTP メッセージの改編を実行す
      る ICAP サービスを指す。



Elson & Cerpa                Informational                      [Page 7]

RFC 3507                          ICAP                        April 2003


   ICAP サーバ {ICAP server}
      アプリケーションが ICAP リクエストを処理することを除いて、上記の HTTP サー
      バと同じである。

   ICAP クライアント {ICAP client}
      リクエストを送信する目的で ICAP サーバへのコネクションを確立するプログラム。
      ICAP クライアントは、多くの場合、ユーザの代わりに動作するサロゲートである。

3.  ICAP の全体動作

   ICAP の意味論を詳細に説明する前に、まずプロトコルの主な機能と期待される用途の
   概要を説明する。前述のように、ICAP は HTTP リクエストの変更 (3.1章) と HTTP
   レスポンスの変更 (3.2章) を対象としている。

3.1  リクエストの変更

   "リクエストの変更" (REQMOD) モードでは、ICAP クライアントが HTTP リクエストを
   ICAP サーバへ送信する。ICAP サーバは、以下いずれかの動作をする。

   1) リクエストの変更バージョンを応答。ICAP クライアントは、オリジンサーバへ変
      更されたリクエストを転送するか、さらなる変更のため他の ICAP サーバへ変更さ
      れたリクエストを転送。

   2) リクエストに対する HTTP レスポンスを応答。これは、エラーが発生した場合に
      ユーザに役立つ情報を提供するために使用される (たとえば、"閲覧を許可されて
      いないページの閲覧リクエストを送信した"など) 。

   3) エラーを応答。

   ICAP クライアントは、これら３つすべての応答を処理できなければいけない (MUST) 。
   ただし、[4] の13.8章で示されている HTTP サロゲートの使用方法に従い、ICAP クラ
   イアント実装者はエラー処理に対して柔軟性を持っている。もし、ICAP サーバがエ
   ラーを応答した場合、ICAP クライアントは、 (たとえば、) ユーザへエラーを応答す
   るか、クライアントから受信した改編前のリクエストをサーバへ転送するか、改編の
   再試行ができる。

   この方式をコンテンツフィルタリングを例に説明する。サロゲートが、クライアント
   からオリジンサーバ上のウェブページのリクエストを受信したとする。サロゲートは、
   ICAP クライアントとしてクライアントのリクエストを URI ベースのコンテンツフィ
   ルタリングが動作する ICAP サーバへ送信する。もし、リクエストされた URI へのア
   クセスが許可される場合、リクエストは変更されずに ICAP クライアントへ応答され
   る。もし ICAP サーバがリクエストされたリソースのアクセス拒否を選択した場合、
   以下のいずれかの動作になる。



Elson & Cerpa                Informational                      [Page 8]

RFC 3507                          ICAP                        April 2003


   1) オリジナル URI の代わりにエラーメッセージを含むページを指すリクエストに変
      更。

   2) HTTP エラーを示すカプセル化された HTTP レスポンスを応答。

   この方式は例えば、匿名化や特殊な装置のリクエスト処理のための Accept: ヘッダの
   変更といった、他の様々なアプリケーションにも使用できる。

   一般的なデータの流れ：

     オリジンサーバ
          | /|\
          |  |
       5  |  |  4
          |  |
         \|/ |              2
   ICAP クライアント -------------->   ICAP サーバ上の
      (サロゲート)   <--------------   ICAP リソース
          | /|\             3
          |  |
       6  |  |  1
          |  |
         \|/ |
      クライアント

   1. クライアントがオリジンサーバ上のオブジェクトを ICAP 対応サロゲート (ICAPク
      ライアント) にリクエスト。

   2. サロゲートが ICAP サーバへリクエストを転送。

   3. ICAP サーバはリクエストに対して ICAP リソースのサービスを実行し、変更され
      た可能性のあるリクエスト、またはリクエストに対するレスポンスを ICAP クライ
      アントに応答。

   手順3でリクエストが返却された場合、

   4. サロゲートがリクエストを送信。元のクライアントのリクエストとは違う可能性の
      あるリクエストをオリジンサーバへ転送する。

   5. オリジンサーバがリクエストに対するレスポンスを送信。

   6. サロゲートは、ICAP サーバまたはオリジンサーバからのレスポンスをクライアン
      トへ転送。



Elson & Cerpa                Informational                      [Page 9]

RFC 3507                          ICAP                        April 2003


3.2  レスポンスの変更

   "レスポンスの変更" (RESPMOD) モードでは、ICAP クライアントが HTTP レスポンス
   を ICAP サーバへ送信する。ICAP クライアントから送信されるレスポンスは、通常オ
   リジンサーバで生成されたものである。ICAP サーバは以下の動作をする。

   1) レスポンスの変更版を応答。

   2) エラーを応答。

   "レスポンスの変更"方式は、HTTP レスポンスがクライアントに配信される前に、HTTP
   レスポンスに対して実行する後処理を目的としている。例としては、特殊な装置で表
   示するための HTML フォーマット、言語の翻訳、ウィルスチェックなどがある。

   一般的なデータの流れ：

     オリジンサーバ
          | /|\
          |  |
       3  |  |  2
          |  |
         \|/ |             4
   ICAP クライアント -------------->   ICAP サーバ上の
      (サロゲート)   <--------------   ICAP リソース
          | /|\            5
          |  |
       6  |  |  1
          |  |
         \|/ |
      クライアント

   1. クライアントが、オリジンサーバ上のオブジェクトを ICAP 対応サロゲート (ICAP
      クライアント) にリクエスト。

   2. サロゲートはリクエストをオリジンサーバへ転送。

   3. オリジンサーバが、リクエストに対するレスポンスを送信。

   4. ICAP 対応サロゲートが、オリジンサーバのレスポンスを ICAP サーバへ送信。

   5. ICAP サーバはオリジンサーバのレスポンスに対して ICAP リソースのサービスを
      実行し、変更された可能性のあるレスポンスを ICAP クライアントに応答。



Elson & Cerpa                Informational                     [Page 10]

RFC 3507                          ICAP                        April 2003


   6. サロゲートは、元のオリジンサーバのレスポンスから変更された可能性のあるレス
      ポンスをクライアントへ転送。

4.  プロトコル意味論

4.1  一般的な動作

   ICAP は HTTP/1.1 [4] に意味や使い方が似たリクエスト/レスポンスプロトコルであ
   る。類似性はあるが、ICAP は HTTP ではなく、HTTP 上で動作するアプリケーション
   プロトコルでもない。これは、例えば ICAP メッセージを HTTP サロゲートから転送
   できないことを意味する。HTTP 上に直接構築しない理由については、8.1章で説明す
   る。

   ICAP はトランスポート層のプロトコルとして TCP/IP を使用する。デフォルトのポー
   ト番号は 1344 だが、他のポートでも使用できる。ICAP クライアントにより、受動的
   に待機している ICAP サーバへ送信される。

   ICAP メッセージはクライアントからサーバへのリクエストや、サーバからクライアン
   トへのレスポンスで構成される。リクエストとレスポンスは RFC 2822 [3] の一般的
   なメッセージ形式を使用する。これは、スタートライン (リクエストライン、または
   ステータスライン) 、いくつかのヘッダフィールド ("headers"としても知られてい
   る) 、ヘッダフィールドの終わりを示す空白行 (つまり、CRLF の前に何もない行) 、
   そして、メッセージボディである。

   ICAP メッセージのヘッダラインはリクエストされた ICAP リソースやキャッシュ制御
   情報など他のメタデータを指定する。ICAP リクエストのメッセージボディは、 (カプ
   セル化した) 変更させる HTTP メッセージが含まれる。

   HTTP/1.1 のような単一のトランスポート接続は、複数のリクエスト/レスポンスのペ
   アで再利用することができる (MAY、おそらくはSHOULD) 。ICAP でこれを実現する方
   法は [4] の8.1.2.2章で説明されているものと同じである。具体的には、一度に一つ
   のトランスポート接続で未処理のリクエストを１つだけ許可することでリクエストと
   レスポンスを照合する。HTTP のように複数の並列接続を使用することもできる (MAY)
    。

4.2  ICAP URI

   すべての ICAP リクエストは ICAP URI を使用してサーバからリクエストされる ICAP
   リソースを指定する。URI は完全なホスト名とリクエストするリソースのパスの両方
   を指定する絶対 URI でなければいけない (MUST) 。URL の書式と意味論の正確な情報
   は、RFC 2396 [1] "Uniform Resource Identifier (URI): 一般的構文"の3章を参照す
   ること。ICAP で定義される URI 構造の概要は以下の通りである。



Elson & Cerpa                Informational                     [Page 11]

RFC 3507                          ICAP                        April 2003


      ICAP_URI = Scheme ":" Net_Path [ "?" Query ]

      Scheme = "icap"

      Net_Path = "//" Authority [ Abs_Path ]

      Authority = [ userinfo "@" ] host [ ":" port ]

   ICAP は、RFC 2396 で定義されているものに新しいスキーム"icap"を追加する。port
   が空、または指定されていない場合、port は 1344 とする。ICAP URI 行は次のよう
   になる。

      icap://icap.example.net:2000/services/icap-service-1

   ICAP サーバは、エイリアス、ローカルバリエーション、およびインタフェースの IP
   アドレスなど、すべてのホスト名を認識できなければいけない (MUST) 。

   ICAP クライアントがサービスの性質を変更するために ICAP サービスへ渡したいすべ
   ての引数を、HTTP で使用されるような属性値ペアの標準的な"?"-表現形式を使用して、
   ICAP-URI の一部として渡すことができる (MAY) 。例えば、以下の通り。

      icap://icap.net/service?mode=translate&lang=french

4.3  ICAP ヘッダ

   この章では、ICAP メッセージとして有効なヘッダを定義する。4.3.1章では、リクエ
   ストとレスポンスの両方で共通するヘッダについて説明する。リクエストおよびレス
   ポンス固有のヘッダはそれぞれ4.3.2章と4.3.3章で説明する。

   ユーザ定義の拡張ヘッダも使用できる。インターネットメールフォーマット [3] に
   よって確立され、後に HTTP [4] によって採用された規則に従って、すべてのユーザ
   定義ヘッダは"X-"の命名規則 ("X-Extension-Header: Foo") に従う必要がある
   (MUST) 。ICAP実装はこの文書が定義するプロトコルへの準拠を失わない限り、"X-"
   ヘッダを無視してもよい (MAY) 。

   各ヘッダフィールドは、名前の後にコロン (":") とフィールド値が続く。フィールド
   名は大文字と小文字を区別しない。ICAP は、[4] の4.2章に記載された規則に従う。

4.3.1  リクエストとレスポンスの共通ヘッダ

   すべての ICAP メッセージのヘッダは、HTTP と同様に ICAP で定義される次のディレ
   クティブを設定してもよい (MAY) 。



Elson & Cerpa                Informational                     [Page 12]

RFC 3507                          ICAP                        April 2003


      Cache-Control
      Connection
      Date
      Expires
      Pragma
      Trailer
      Upgrade

  "Transfer-Encoding"は許可されていないことに注意すること。ICAP ボディの特別な転
  送符号化要件は4.4章で説明する。

   Upgrade ヘッダは、HTTP/1.1 [4] に記載されているように、ICAP コネクションでト
   ランスポート層のセキュリティをネゴシエートするために使用してもよい (MAY) 。

   ICAP 固有のヘッダとして定義されているものは、次の通りである。

      Encapsulated  (4.4章を参照)

4.3.2  リクエストヘッダ

   HTTP と同様に、ICAP リクエストは、メソッド、リクエストされた ICAP リソースの
   完全な URI、および ICAP バージョン文字列を含むリクエストラインで開始する必要
   がある (MUST) 。ICAP の現在のバージョン番号は"1.0"である。

   このバージョンの ICAP では3つのメソッドが定義されている。

      REQMOD  - リクエスト変更のため (4.8章)
      RESPMOD - レスポンス変更のため (4.9章)
      OPTIONS - 設定について知るため (4.10章)

   OPTIONS メソッドは、すべての ICAP サーバで実装されなければいけない (MUST) 。
   他のメソッドは任意であり、実装されていてもよい (MAY) 。

   ユーザ定義の拡張メソッドが許可されている。拡張メソッドを使用する前に、ICAP ク
   ライアントは OPTIONS メソッドを使用して ICAP サーバへサポートされているメソッ
   ドの一覧を問い合わせるべきである (SHOULD) 。詳細は、4.10章を参照。

   4.2章で説明されている URI 規則を考慮すると、正しい形式の ICAP リクエストライ
   ンは次の例のようになる。

      RESPMOD icap://icap.example.net/translate?mode=french ICAP/1.0



Elson & Cerpa                Informational                     [Page 13]

RFC 3507                          ICAP                        April 2003


   対応する HTTP リクエストヘッダ ([4] の5.3章) と同じ意味論に従って、ICAP リク
   エストでは以下の固有リクエストヘッダが許可される。

      Authorization
      Allow (4.6章参照)
      From  ([4] の14.22章参照)
      Host (HTTP/1.1 と同様に ICAP でも必須 (REQUIRED) )
      Referer ([4] の14.36章参照)
      User-Agent

   HTTPのようなヘッダに加え、ICAP 独自のリクエストヘッダも定義されている。

      Preview (4.5章参照)

4.3.3  レスポンスヘッダ

   ICAP レスポンスは、ICAP バージョンとステータスコードを含む、HTTP で使用される
   ものと似た形式の ICAP ステータスラインで開始する必要がある (MUST) 。 例えば、

      ICAP/1.0 200 OK

   ICAP の ICAP ステータスコードの意味論は、この文書で別段の指定 (100 (4.5章) お
   よび 204 (4.6章) など) がない限り、HTTP で定義されているステータスコード ([4]
   の6.1.1章および10章) と一致する。

   HTTP とは異なる ICAP エラーコードは次の通りである。

   100 - ICAP Preview の後に継続 (4.5章) 。

   204 - 変更不要 (4.6章) 。

   400 - 不正なリクエスト。

   404 - ICAP サービスが不明。

   405 - サービスに許可されていないメソッド (例えば、REQMOD のみサポートしている
         サービスに RESPMOD がリクエストされた) 。

   408 - リクエストがタイムアウト。ICAP サーバが ICAP クライアントからの要求の受
         信を断念した。

   500 - サーバエラー。"ディスク容量不足"など ICAP サーバでエラー発生した。

   501 - メソッドが未実装。OPTIONS は実装が必須のため、この応答は OPTIONS のリク
         エストでは無効である。



Elson & Cerpa                Informational                     [Page 14]

RFC 3507                          ICAP                        April 2003


   502 - 不正なゲートウェイ。ICAP プロキシのプロキシ処理でエラーが発生した。

   503 - サービスが過負荷。ICAP サーバがこのサービスの最大コネクションを超えた。
         ICAP クライアントは今後この上限を超えるべきではない。

   505 - サーバがサポートしていない ICAP バージョン。

   HTTP と同様に、4xx クラスのエラーコードはクライアントエラーを示し、5xx クラス
   はサーバエラーを示す。

   ICAP レスポンスヘッダフィールドを使用することで、サーバは ICAP のステータスラ
   インに配置できない追加の情報をレスポンスで渡すことができる。

   HTTP レスポンスヘッダ ([4] の6.2章)と同じ意味論に従って、固有のレスポンスヘッ
   ダが ICAP リクエストで許可される。

      Server ([4] の14.38章参照)

   HTTP のようなヘッダに加えて、ICAP 独自のレスポンスヘッダも定義されている。

      ISTag (4.7章参照)

4.3.4  HTTP メッセージ内の ICAP に関するヘッダ

   ICAP 対応の HTTP サロゲートがオリジンサーバに HTTP リクエストを送信する場合、
   サロゲートの ICAP 機能をオリジンサーバに通知するとよい。オリジンサーバは、こ
   の情報に応じてレスポンスを変更することができる。たとえば、オリジンサーバは、
   ダウンストリームの ICAP サーバが代わりに広告を挿入できることが認識できる場合、
   オリジンサーバは広告をページに挿入しないことを選択できる。

   この ICAP 仕様では、HTTP クライアントとサーバ間の通信における HTTP 規則を規定
   することはできないが、このようなヘッダを使用する場合は、"X-ICAP"で始めるべき
   である (SHOULD) 。ICAP サービスを使用する HTTP クライアントは、アプリケーショ
   ン固有のヘッダとともに、"X-ICAP-Version: 1.0"ヘッダを最低限含めるべきである
   (SHOULD) 。



Elson & Cerpa                Informational                     [Page 15]

RFC 3507                          ICAP                        April 2003


4.4  ICAP ボディ: HTTP メッセージのカプセル化

   ICAP カプセル化モデルは、リクエスト、レスポンス、およびリクエストとレスポンス
   のペアを ICAP サーバへベクトル化できるようにする、任意の数の HTTP メッセージ
   セクションをカプセル化した ICAP メッセージボディに詰め込むための手軽な方法で
   ある。

   これは、対象のメッセージ (カプセル化"される"セクション) を単一の ICAP メッ
   セージボディ (カプセル化"した"メッセージ) に連結することで実現する。カプセル
   化されるセクションは、HTTP メッセージのヘッダまたはボディである。

   カプセル化したボディは [4] の3.6.1章に記述されている"チャンク"転送コーディン
   グを使用して転送しなければいけない (MUST) 。ただし、カプセル化ヘッダはチャン
   ク化してはいけない (MUST NOT) 。言い換えれば、ICAP メッセージボディは、ボディ
   がカプセル化ヘッダからカプセル化ボディのセクションに渡されるときに、非チャン
   クからチャンクに切り替わる。 (4.8.3章および4.9.3章の例を参照) 。この仕様の背
   景は8.2章で説明する。

4.4.1  "Encapsulated"ヘッダ

   カプセル化メッセージボディに対する各カプセル化セクションの開始位置のオフセッ
   ト値は、"Encapsulated"ヘッダで指定する。このヘッダはすべての ICAP メッセージ
   に含まれていなければいけない (MUST) 。例えば、以下のヘッダは

      Encapsulated: req-hdr=0, res-hdr=45, res-body=100

   リクエストヘッダのグループ、レスポンスヘッダのグループ、そしてレスポンスボ
   ディをカプセル化したメッセージであることを表す。それぞれのバイトオフセットが
   列挙されている。バイトオフセットは、HTTP の Content-Length ヘッダとの一貫性を
   保つため、十進表記とする。

   特別なエンティティである"null-body"は、ICAP メッセージにカプセル化ボディが存
   在しないことを表す。

   Encapsulated ヘッダの構文は以下の通りである。

   encapsulated_header: "Encapsulated: " encapsulated_list
   encapsulated_list: encapsulated_entity |
                      encapsulated_entity ", " encapsulated_list
   encapsulated_entity: reqhdr | reshdr | reqbody | resbody | optbody
   reqhdr  = "req-hdr" "=" (decimal integer)
   reshdr  = "res-hdr" "=" (decimal integer)
   reqbody = { "req-body" | "null-body" } "=" (decimal integer)
   resbody = { "res-body" | "null-body" } "=" (decimal integer)
   optbody = { "opt-body" | "null-body" } "=" (decimal integer)



Elson & Cerpa                Informational                     [Page 16]

RFC 3507                          ICAP                        April 2003


   Encapsulated ヘッダには、構文としての制約に加えて意味論としての制約がある。カ
   プセル化された部分がカプセル化メッセージボディに現れる順序は、Encapsulated
   ヘッダに記述された順序と同じでなければいけない (MUST) 。つまり、Encapsulated
   行に列挙されているオフセット値は、単調増加していなければいけない (MUST) 。さ
   らに、Encapsulated ヘッダの正しい形式は、使用されているメソッド (REQMOD、
   RESPMOD、または OPTIONS) により異なる。具体的には、以下の通りである。

   REQMOD  リクエスト encapsulated_list: [reqhdr] reqbody
   REQMOD  レスポンス encapsulated_list: {[reqhdr] reqbody} |
                                         {[reshdr] resbody}
   RESPMOD リクエスト encapsulated_list: [reqhdr] [reshdr] resbody
   RESPMOD レスポンス encapsulated_list: [reshdr] resbody
   OPTIONS レスポンス encapsulated_list: optbody

   上記の文法において、カプセル化ヘッダは常に任意であることに注意すること。カプ
   セル化されたメッセージごとに最大1つのボディが許可されている。カプセル化ボディ
   が現れない場合は、代わりに"null-body"ヘッダを使用する。これはヘッダセクション
   の長さを示すために有用である。

   有効な Encapsulated ヘッダの例を以下に示す。

   /* REQMOD リクエスト: カプセル化された HTTP リクエストヘッダは 0 バイトから始
    * まる。HTTP リクエストボディは 412 バイトから始まる (POST など) 。 */
   Encapsulated: req-hdr=0, req-body=412

   /* REQMOD リクエスト: 上記と同様であるが、リクエストボディは存在しない (GET
    * など) ため、代わりに null-body ディレクティブを使用する。この場合も前述の
    * 場合も、Encapsulated ヘッダよりリクエストヘッダの長さは 412 バイトであるこ
    * とがわかる。 */
   Encapsulated: req-hdr=0, null-body=412

   /* REQMOD レスポンス: ICAP サーバはボディと一緒に変更されたリクエストを返した。
    * */
   Encapsulated: req-hdr=0, req-body=512

   /* RESPMOD リクエスト: リクエストヘッダは 0 、レスポンスヘッダは 822 、レスポ
    * ンスボディは 1655 である。RESPMOD リクエストでは、リクエストボディは許可さ
    * れていない。 */
   Encapsulated: req-hdr=0, res-hdr=822, res-body=1655

   /* RESPMOD または REQMOD レスポンス: ヘッダとボディを返した。 */
   Encapsulated: res-hdr=0, res-body=749



Elson & Cerpa                Informational                     [Page 17]

RFC 3507                          ICAP                        April 2003


   /* オプションボディが存在する (IS) 場合の、OPTIONS レスポンス */
   Encapsulated: opt-body=0

   /* オプションボディが存在しない (IS NOT) 場合の、OPTIONS レスポンス */
   Encapsulated: null-body=0

4.4.2  カプセル化された HTTP ヘッダ

   通常、ICAP メッセージは HTTP メッセージヘッダとエンティティボディをカプセル化
   する。HTTP ヘッダはそれぞれリクエストとレスポンスのリクエストラインまたはス
   テータスラインで始まり、その後に HTTP ヘッダが続かなければいけない (MUST) 。

   カプセル化されたヘッダは、人間の可読性や各行の HTTP 解析の終端のために、空白
   行で終わらなければいけない (MUST) 。

   HTTP/1.1 ではエンドツーエンドヘッダとホップバイホップヘッダを区別する ([4] の
   13.5.1章を参照) 。

   エンドツーエンドヘッダはメッセージの最終的な受信者にとって意味をもつが、ホッ
   プバイホップヘッダは単一のトランスポート層コネクションに対してのみ意味をもつ。
   ホップバイホップヘッダには、Connection 、Keep-Alive などがある。すべてのエン
   ドツーエンド HTTP ヘッダはカプセル化すべきである (SHOULD) が、すべてのホップ
   バイホップヘッダはカプセル化してはいけない (MUST NOT) 。

   カプセル化に関する上記の制約に反して、ホップバイホップヘッダの Proxy-
   Authenticate および Proxy-Authorization ヘッダは、(カプセル化メッセージではな
   く) ICAP ヘッダセクションで ICAP サーバに転送する必要がある (MUST) 。これによ
   り、ICAP クライアントが HTTP サロゲートでもある場合に、ICAP クライアントに向
   けて送信された可能性のあるクライアント資格情報の伝播が可能となる。これは、"プ
   ロキシが特定のリクエストと連携して認証するメカニズムである場合、クライアント
   リクエストの資格情報を次のプロキシに中継してもよい (MAY)" (14.34章) と明示し
   ている HTTP/1.1 に矛盾しないことに注意すること。

   カプセル化メッセージの Via ヘッダは、カプセル化メッセージが HTTP サロゲートを
   通過しているかのように、ICAP サーバによって変更されるべきである (SHOULD) 。
   ICAP サーバにより追加されるViaヘッダは、プロトコルを ICAP/1.0 として設定しな
   ければいけない (MUST) 。

4.5  メッセージプレビュー

   ICAP クライアントから ICAP サーバに送信される ICAP REQMOD および RESPMOD リク
   エストには、"プレビュー"を含めてもよい。この機能により、ICAP サーバはトランザ
   クションの開始を認識し、残りのリクエストメッセージの受信をせずに、トランザク
   ションを早期に終了するかどうかを判断できる。プレビューを使用すると、次のよう
   なさまざまな状況においてパフォーマンスが大幅に向上する。



Elson & Cerpa                Informational                     [Page 18]

RFC 3507                          ICAP                        April 2003


   -  ウィルスチェッカは、ファイルの種類、ファイル名の拡張子、およびファイルの最
      初の数バイトを調べるだけで、ファイルの大部分を"クリーン"と判定できる。ファ
      イルの全体をウィルスチェック用 ICAP サーバに送信する必要があるのは、残りの
      ファイルだけである。

   -  コンテンツフィルタは、プレビューを使用して、HTTP エンティティを検査する必
      要があるかどうかを判断できる ("テキスト"が実際は画像データであることが判明
      した場合は、HTTP ファイルタイプだけでは不十分である) 。ファイルの先頭にあ
      るマジックナンバーで、ファイルを JPEG または GIF として識別できる。

   -  ICAP サーバがすべての GIF87 ファイルを GIF89 ファイルに変換したい場合、
      ファイルの最初の数バイトを見ることで GIF87 ファイルを素早く検出することが
      できる。

   -  ICAP サーバがすべてのキャッシュ可能なファイルを24時間以内に期限切れにした
      い場合、今後24時間を超える期限切れの HTTP メッセージを選択することで実装で
      きる。

   ICA Pサーバは、リソースごとに特定の ICAP アプリケーションに必要なプレビューの
   バイト数を指定するため、OPTIONS メソッド (4.10章を参照) を使用するべきである
   (SHOULD) 。クライアントは少なくとも 4096 バイトの Preview を提供すべきである
   (SHOULD) 。さらに、Preview 機能が有効であると提示したICAPリソースを使用する場
   合、クライアントは Preview 機能を提供すべきである (SHOULD) 。 (この提示は、
   OPTIONS メソッド、または他の"アウトオブバンド"設定を介して提供される場合があ
   る。) クライアントは受け入れても構わないとサーバが提示しているより大きいプレ
   ビューを提供すべきではない (SHOULD NOT) 。

   Preview 機能を有効にするため、ICAP クライアントはリクエストヘッダにプレビュー
   の長さを示す"Preview: "ヘッダを追加しなければいけない (MUST) 。その場合、ICAP
   クライアントは以下を送信する。

   -  カプセル化されたすべてのヘッダセクション

   -  もしあれば、Preview で提示されたバイト数 (多くの場合 0) までの、カプセル化
      されたボディセクションの先頭。

   Preview を送信した後、クライアントは停止し、ICAP サーバからのレスポンスを待つ。
   このメカニズムは HTTP の"100-Continue"機能と似ているが、停止ポイントと待機ポ
   イントをメッセージボディ内に含めることができる点が異なる。HTTP では、ポイント
   はヘッダと本体の間の境界である必要がある。



Elson & Cerpa                Informational                     [Page 19]

RFC 3507                          ICAP                        April 2003


   例えば、カプセル化された HTTP ヘッダのみで構成される Preview を実行する場合、
   ICAP クライアントは ICAP リクエストに次のヘッダを追加する。

      Preview: 0

   これは、ICAP クライアントがカプセル化されたヘッダセクションのみを ICAP サーバ
   に送信し、続けて長さ0のチャンクを送信して停止し、ICAP サーバにより多くのカプ
   セル化されたボディのバイトを送信するための"次へ"を待つことを表す。

   同様に、以下の ICAP ヘッダの場合、

      Preview: 4096

   ICAP クライアントは、ICAP リクエストのカプセル化されたボディにある 4096 バイ
   トの送信元サーバデータを ICAP サーバに送信しようとすることを表す。ただし、
   ICAP クライアントはサロゲートとして動作しており、オリジンサーバのレスポンスの
   合計長を先読みしていないため、実際の転送バイトはこれより少なくなる場合がある
   ことに注意することが重要である。ICAP カプセル化ヘッダセクションの全体が送信さ
   れ、続けて最大 4096 バイトのカプセル化 HTTP ボディが送信される。チャンクボ
   ディの終端"0\r\n\r\n"は常にこのトランザクションに含まれる。

   プレビューを送信した後、ICAP クライアントは ICAP サーバからのレスポンスを待つ。
   レスポンスは次のいずれかでなければいけない (MUST) 。

   -  204 No Content.  ICAP サーバは、ICAP クライアントのリクエストを変更しない
      (または、変更できない) 。ICAP クライアントは、メッセージ全体を ICAP サーバ
      に送信し同一のメッセージがレスポンスされた場合と同様に、このレスポンスを扱
      う必要がある (MUST) 。

   -  元のリクエストが、ICAP REQMOD か RESPMOD かで処理が異なる。REQMOD および
      RESPMOD レスポンスの形式については、4.8.2章および4.9.2章を参照。

   -  100 Continue.  カプセル化 HTTP ボディ全体がプレビューに収まらなかった場合、
      ICAP クライアントは、プレビュー直後のチャンクから開始して、残りの ICAP
      メッセージを送信する必要がある (MUST) 。メッセージ全体がプレビューに収まる
      場合 (後述の"EOF"シンボルで検出される) 、ICAP サーバは 100 Continue で応答
      してはいけない (MUST NOT) 。

   ICAP クライアントがプレビューを実行しているとき、最終的に到着する HTTP メッ
   セージの何バイトを HTTP サーバへ中継するかがまだ不明な場合がある。そのため、
   ICAP はプレビュー処理中に予期せずすべての HTTP メッセージが到達した場合のため
   に、ICAP クライアントが ICAP サーバに"EOF"を通知する方法を定義している。これ
   は、ヘッダのみの HTTP レスポンスが ICAP クライアントに届く場合 (つまり、0バイ
   トのボディ) に、特に便利な最適化である。ICAP サーバのレスポンス完了に必要なの
   は1回のラウンドトリップのみとなる。



Elson & Cerpa                Informational                     [Page 20]

RFC 3507                          ICAP                        April 2003


   ICAP チャンクが最後のチャンクであることを示すため、"ieof"という HTTP チャンク
   拡張を定義する （[4] を参照）。ICAP サーバは、チャンクデータを ICAP アプリ
   ケーションプロセスに渡す前に、このチャンク拡張子を取り除かなければいけない
   (MUST) 。

   例として、オリジンサーバから HTTP レスポンスヘッダを受信し、ICAP サーバと
   ICAP RESPMOD トランザクションを開始した ICAP クライアントを考える。オリジン
   サーバは Content-Length ヘッダを使用していないため、何バイトのボディバイトが
   オリジンサーバから到着するかはまだわからない。ICAP クライアントは ICAP サーバ
   に、"Preview: 1024"リクエストヘッダを使用して 1024 バイトのプレビューを送信す
   ることを通知する。HTTP オリジンサーバがデータを送信する前に ICAP クライアント
   への接続を閉じた場合 (つまり、ゼロバイトのボディを提供した場合) 、そのゼロバ
   イトのオリジンサーバのレスポンスに対応するゼロバイトのプレビューは次のように
   なる。

      \r\n
      0; ieof\r\n\r\n

   ICAP サーバはこのプレビューを見れば、"ieof"の存在からクライアントはそれ以上
   チャンクデータを送信しないことがわかる。この場合、サーバは変更されたレスポン
   スか、204 No Content メッセージをすぐに応答しなければいけない (MUST) 。この場
   合、100-Continue 応答を送信してはいけない (MUST) 。 (もしオリジンサーバのレス
   ポンスが1バイト以上であれば、"ieof"は現れないだろう。その場合は、ICAP サーバ
   は 100-Continue か、変更されたレスポンス、または 204 No Content で応答しても
   よい (MAY) 。)

   別の例として、プレビューが 1024 バイトで送信元のレスポンスが2チャンクで 1024
   バイトの場合、カプセル化は次のようになる。

      200\r\n
      <512 バイトのデータ>\r\n
      200\r\n
      <512 バイトのデータ>\r\n
      0; ieof\r\n\r\n

      <204 または 変更されたレスポンス>
      (ieof のため、100 Continue は許容されない)



Elson & Cerpa                Informational                     [Page 21]

RFC 3507                          ICAP                        April 2003


   プレビューが 1024 バイトで送信元のレスポンスが 1025 バイトの場合 (および ICAP
   サーバが 100-continue で応答する場合) 、これらのチャンクがネットワーク上に表
   示される。

      200\r\n
      <512 バイトのデータ>\r\n
      200\r\n
      <512 バイトのデータ>\r\n
      0\r\n

      <100 Continue メッセージ>

      1\r\n
      <1 バイトのデータ>\r\n
      0\r\n\r\n  <プレビューモードではなくなったため、ieof はない>

   ICAP サーバが eof 指示子を受信すると、現在のチャンクストリームの読み取りを終
   了する。

   Preview 機能を提供する場合、ICAP クライアントは"204 No Content"レスポンスを受
   け入れることができるよう、メッセージのプレビューした部分の一時的なバッファリ
   ングを約束していることに注意すること。メッセージの残りの部分は必ずしもバッ
   ファリングされていない。100-Continue の後、別のソースから ICAP サーバへ直接渡
   される可能性がある。

4.6  Preview 以外での"204 No Content"レスポンス

   ICAP クライアントは、メッセージ全体に対する"204 No Content"レスポンスの受け入
   れを選択してもよい (MAY) 。これは、メッセージ全体をバッファするという負担がク
   ライアントにかかるため、クライアントが判断する。

   ICAP クライアントは、リクエストヘッダに"Allow: 204"を含めてもよい (MAY) 。こ
   れは、オブジェクトに変更の必要がない場合、"204 No Content"レスポンスでサーバ
   がメッセージを返信してもよい (MAY) ということを示す。

   ICAP サーバは"Allow: 204"を含まないリクエストを受け取った場合、 204 で応答し
   てはいけない (MUST NOT) 。この場合、ICAP サーバは受信したメッセージと同一で
   あっても、メッセージ全体をクライアントに返さなければいけない (MUST) 。

   この規則の唯一の例外 (ONLY EXCEPTION) は、前の章で説明したとおり、メッセージ
   プレビューの場合である。この場合、元のリクエストに"Allow: 204"ヘッダがなくて
   も (EVEN) 、ICAP サーバはメッセージプレビューのレスポンスとして 204 No
   Content メッセージで応答できる。

4.7  ISTag レスポンスヘッダ

   ISTag ("ICAP Service Tag") レスポンスヘッダフィールドは、ICAP サーバがサービ
   スの現在の状態を表すサービス固有の"cookie"を ICAP クライアントに送信する方法
   を提供する。これは、最大 32 バイトの英数字文字列 (ヌル文字を含まない) であり、
   ソフトウェアのバージョンやサービスの構成などを表すことができる。ISTag は、こ
   れまでの ICAP サーバのレスポンスをキャッシュしている可能性がある ICAP クライ
   アントによって、そのキャッシュがまだ新鮮であるとみなせるかを検証される。ICAP
   サーバの変更によって以前のレスポンスが無効になった場合、ICAP サーバは ISTag
   を変更することで ICAP クライアントのキャッシュの一部を無効にすることができる。
   ISTag は ICAP サーバからのすべての ICAP レスポンスに含まれなければいけない
   (MUST) 。



Elson & Cerpa                Informational                     [Page 22]

RFC 3507                          ICAP                        April 2003


   ウィルススキャン ICAP サービスを例に考える。ISTag は、ウィルススキャナのソフ
   トウェアバージョンとそのウィルスシグネチャデータベースのリリース番号の組み合
   わせである。データベースが更新された場合、ISTag を変更することで、古い ISTag
   における以前のすべてのレスポンスの"クリーン"の判定とキャッシュを無効にするこ
   とができる。

   ISTag は HTTP ETag と類似しているが、同一ではない。ETag は特定のエンティティ
   (オブジェクト) を検証するが、ISTag は特定のサービス (URI) によって生成された
   すべてのエンティティを検証する。ISTag を変更すると、更新された ISTag を含むレ
   スポンスのエンティティだけでなく、古い ISTag でサービスを提供していた他のすべ
   てのエンティティが無効になる。

   ISTag の構文は単純であり、
      ISTag = "ISTag: " quoted-string

   この文書では [4] の2.2章で定義される quoted-string 定義を使用する。

   例えば、
      ISTag: "874900-1994-1c02798"

4.8  リクエスト変更 (Request Modification) モード

   3.1章で説明したこのメソッドでは、ICAP クライアントが HTTP リクエストを ICAP
   サーバへ送信する。ICAP サーバは、変更バージョンのリクエスト、HTTP レスポンス、
   または (クライアントが 204 レスポンスをサポートしている場合) 変更不要を返す。

4.8.1  リクエスト

   REQMOD モードでは、ICAP リクエストはカプセル化された HTTP リクエストを含まな
   ければいけない (MUST) 。ホップバイホップヘッダを除いて、ヘッダと (あれば) ボ
   ディの両方をカプセル化しなければいけない (MUST) 。



Elson & Cerpa                Informational                     [Page 23]

RFC 3507                          ICAP                        April 2003


4.8.2  レスポンス

   ICAP サーバから ICAP クライアントへのレスポンスは、次の4つの形式のいずれかに
   なる。

   -  エラー表示

   -  ICAP クライアントのリクエストが改編を必要としないことを示す 204 (このレス
      ポンスの制限については4.6章を参照)

   -  カプセル化した ICAP クライアントのリクエストの変更バージョン

   -  カプセル化した HTTP エラーレスポンス。HTTP レスポンスがエラー (403
      Forbidden など) の場合にのみ、リクエスト変更 (Request Modification) リクエ
      ストに対して HTTP レスポンスできることに注意すること。

   レスポンスメッセージの最初の行は 4.3.3章で説明されているとおりステータスライ
   ンでなければいけない (MUST) 。リターンコードが 2XX の場合、ICAP クライアント
   は通常のリクエスト処理を継続すべきである (SHOULD) 。ICAP クライアントがサロ
   ゲートの場合、キャッシュからオブジェクトを処理すること、および変更されたリク
   エストをオリジンサーバへ転送することを含む。カプセル化された HTTP エラーレス
   ポンスを 2XX ICAP レスポンスが含むことは有効であることに注意すること。この場
   合、ICAP クライアントはダウンストリームのクライアントへ返送すべきである。

   エラーを示すその他のリターンコードの場合、ICAP クライアントは (たとえば) ダウ
   ンストリームのクライアントまたはユーザにエラーを返すか、クライアントから到着
   した未改編のリクエストを実行するか、もしくは改編の再試行を行ってもよい (MAY) 。

   もし変更されたリクエストヘッダがある場合は、4.4章で説明される適切なカプセル化
   を使用して ICAP クライアントに返されなければいけない (MUST) 。

4.8.3  用例

   次の例では、サロゲートはクライアントから単純な GET リクエストを受け取る。ICAP
   クライアントとして機能するサロゲートは、このリクエストを変更のために ICAP
   サーバに転送する。ICAPサーバ はリクエストヘッダを変更し、それらを ICAP クライ
   アントに送返する。この仮想の ICAP サーバでは、いくつかのヘッダを変更し、元の
   リクエストから cookie を取り除く。

   すべての例において、カプセル化されたメッセージボディのチャンク化のため、追加
   のメタデータがメッセージに含まれる (もしあれば) 。行末の終端と空白行は2バイト
   の"CRLF"とする。



Elson & Cerpa                Informational                     [Page 24]

RFC 3507                          ICAP                        April 2003


   ICAP Request Modification Example 1 - ICAP リクエスト
   ----------------------------------------------------------------
   REQMOD icap://icap-server.net/server?arg=87 ICAP/1.0
   Host: icap-server.net
   Encapsulated: req-hdr=0, null-body=170

   GET / HTTP/1.1
   Host: www.origin-server.com
   Accept: text/html, text/plain
   Accept-Encoding: compress
   Cookie: ff39fk3jur@4ii0e02i
   If-None-Match: "xyzzy", "r2d2xxxx"

   ----------------------------------------------------------------

   ICAP Request Modification Example 1 - ICAP レスポンス
   ----------------------------------------------------------------
   ICAP/1.0 200 OK
   Date: Mon, 10 Jan 2000  09:55:21 GMT
   Server: ICAP-Server-Software/1.0
   Connection: close
   ISTag: "W3E4R7U9-L2E4-2"
   Encapsulated: req-hdr=0, null-body=231

   GET /modified-path HTTP/1.1
   Host: www.origin-server.com
   Via: 1.0 icap-server.net (ICAP Example ReqMod Service 1.1)
   Accept: text/html, text/plain, image/gif
   Accept-Encoding: gzip, compress
   If-None-Match: "xyzzy", "r2d2xxxx"

   ----------------------------------------------------------------

   2番目の例は最初の例と似ているが、変更されるリクエストは GET ではなく POST で
   ある。カプセル化された Content-Length の引数は、POST メッセージの変更されたボ
   ディが反映されている。外側の ICAP メッセージにはチャンクを使用するため
   Content-Length ヘッダを必要としない (付加されない) 。

   この2番目の例では、Encapsulated ヘッダは、リクエストとレスポンスの両方に付加
   され、転送されたヘッダと転送されたボディの間の区分を示している。



Elson & Cerpa                Informational                     [Page 25]

RFC 3507                          ICAP                        April 2003


   ICAP Request Modification Example 2 - ICAP リクエスト
   ----------------------------------------------------------------
   REQMOD icap://icap-server.net/server?arg=87 ICAP/1.0
   Host: icap-server.net
   Encapsulated: req-hdr=0, req-body=147

   POST /origin-resource/form.pl HTTP/1.1
   Host: www.origin-server.com
   Accept: text/html, text/plain
   Accept-Encoding: compress
   Pragma: no-cache

   1e
   I am posting this information.
   0

   ----------------------------------------------------------------

   ICAP Request Modification Example 2 - ICAP レスポンス
   ----------------------------------------------------------------
   ICAP/1.0 200 OK
   Date: Mon, 10 Jan 2000  09:55:21 GMT
   Server: ICAP-Server-Software/1.0
   Connection: close
   ISTag: "W3E4R7U9-L2E4-2"
   Encapsulated: req-hdr=0, req-body=244

   POST /origin-resource/form.pl HTTP/1.1
   Host: www.origin-server.com
   Via: 1.0 icap-server.net (ICAP Example ReqMod Service 1.1)
   Accept: text/html, text/plain, image/gif
   Accept-Encoding: gzip, compress
   Pragma: no-cache
   Content-Length: 45

   2d
   I am posting this information.  ICAP powered!
   0

   ----------------------------------------------------------------

   最後に、3番目の例では、ICAP サーバはリクエスト変更 (Request Modification) リ
   クエストを受信した際に、エラーレスポンスを返すことを示している。

   ICAP Request Modification Example 3 - ICAP リクエスト
   ----------------------------------------------------------------
   REQMOD icap://icap-server.net/content-filter ICAP/1.0
   Host: icap-server.net
   Encapsulated: req-hdr=0, null-body=119

   GET /naughty-content HTTP/1.1
   Host: www.naughty-site.com
   Accept: text/html, text/plain
   Accept-Encoding: compress

   ----------------------------------------------------------------



Elson & Cerpa                Informational                     [Page 26]

RFC 3507                          ICAP                        April 2003


   ICAP Request Modification Example 3 - ICAP レスポンス
   ----------------------------------------------------------------
   ICAP/1.0 200 OK
   Date: Mon, 10 Jan 2000  09:55:21 GMT
   Server: ICAP-Server-Software/1.0
   Connection: close
   ISTag: "W3E4R7U9-L2E4-2"
   Encapsulated: res-hdr=0, res-body=213

   HTTP/1.1 403 Forbidden
   Date: Wed, 08 Nov 2000 16:02:10 GMT
   Server: Apache/1.3.12 (Unix)
   Last-Modified: Thu, 02 Nov 2000 13:51:37 GMT
   ETag: "63600-1989-3a017169"
   Content-Length: 58
   Content-Type: text/html

   3a
   Sorry, you are not allowed to access that naughty content.
   0

   ----------------------------------------------------------------

4.9  レスポンス変更 (Response Modification) モード

   3.2章で説明したこのメソッドでは、ICAP クライアントはオリジンサーバの HTTP レ
   スポンスを ICAP サーバに送信し、 (可能ならば) そのレスポンスに対する元のクラ
   イアントのリクエストも送信する。リクエスト変更 (Request Modification) メソッ
   ドと同様に、ICAP サーバからのレスポンスは、改編された HTTP レスポンス、エラー、
   または改編不要を示す 204 レスポンスコードとなる。

4.9.1  リクエスト

   4.4章で説明したカプセル化を使用し、変更される HTTP レスポンスのヘッダとボディ
   を ICAP ボディに含まれなければいけない (MUST) 。可能ならば、元のクライアント
   のリクエストヘッダも含めるべきである (SHOULD) 。他のメソッドと同様に、カプセ
   ル化されたメッセージのホップバイホップヘッダは転送してはいけない (MUST NOT) 。
   Encapsulated ヘッダでこれら4つのそれぞれの始まりのバイトオフセットを示さなけ
   ればいけない (MUST) 。

4.9.2  レスポンス

   ICAP サーバからのレスポンスは、リクエスト変更 (Request Modification) メソッド
   (4.8章) のレスポンスと同様であり、

   -  エラー表示



Elson & Cerpa                Informational                     [Page 27]

RFC 3507                          ICAP                        April 2003


   -  カプセル化した ICAP クライアントのリクエストの変更バージョン

   -  カプセル化され変更された可能性のある HTTP レスポンスヘッダとレスポンスボ
      ディ

   -  ICAP クライアントのリクエストが改編を必要としないことを示す HTTP 204 レス
      ポンス

   レスポンスメッセージの最初の行は 4.3.3章で説明されている通りステータスライン
   でなければいけない (MUST) 。リターンコードが 2XX の場合、ICAP クライアントは
   通常のリクエスト処理を継続すべきである (SHOULD) 。ICAP クライアントは、レスポ
   ンスについてさらに判断する (例えば、キャッシュ可能性) ため、レスポンスのメッ
   セージヘッダ内のヘッダを再検査してもよい (MAY) 。

   エラーを示すその他のリターンコードの場合、これらのエラーは ICAP クライアント/
   サーバのトランザクションでのみ意味をもつため、ICAP クライアントはこれらをその
   ままダウンストリームのクライアントに返すべきではない (SHOULD) 。

   変更されたレスポンスヘッダがあれば、4.4章で説明される適切なカプセル化を使用し
   て ICAP クライアントに返されなければいけない (MUST) 。

4.9.3  用例

   Example 4 では、ICAPクライアントはクライアントの GET の結果として返されたエン
   ティティの変更をリクエストしている。元のクライアントの GET はオリジンサーバの
   "www.origin-server.com" である。ICAP サーバは "icap.example.org" である。

   ICAP Response Modification Example 4 - ICAP リクエスト
   ----------------------------------------------------------------
   RESPMOD icap://icap.example.org/satisf ICAP/1.0
   Host: icap.example.org
   Encapsulated: req-hdr=0, res-hdr=137, res-body=296

   GET /origin-resource HTTP/1.1
   Host: www.origin-server.com
   Accept: text/html, text/plain, image/gif
   Accept-Encoding: gzip, compress

   HTTP/1.1 200 OK
   Date: Mon, 10 Jan 2000 09:52:22 GMT
   Server: Apache/1.3.6 (Unix)
   ETag: "63840-1ab7-378d415b"
   Content-Type: text/html
   Content-Length: 51

   33
   This is data that was returned by an origin server.
   0

   ----------------------------------------------------------------



Elson & Cerpa                Informational                     [Page 28]

RFC 3507                          ICAP                        April 2003


   ICAP Response Modification Example 4 - ICAP レスポンス
   ----------------------------------------------------------------
   ICAP/1.0 200 OK
   Date: Mon, 10 Jan 2000  09:55:21 GMT
   Server: ICAP-Server-Software/1.0
   Connection: close
   ISTag: "W3E4R7U9-L2E4-2"
   Encapsulated: res-hdr=0, res-body=222

   HTTP/1.1 200 OK
   Date: Mon, 10 Jan 2000  09:55:21 GMT
   Via: 1.0 icap.example.org (ICAP Example RespMod Service 1.1)
   Server: Apache/1.3.6 (Unix)
   ETag: "63840-1ab7-378d415b"
   Content-Type: text/html
   Content-Length: 92

   5c
   This is data that was returned by an origin server, but with
   value added by an ICAP server.
   0

   ----------------------------------------------------------------

4.10  OPTIONS メソッド

   ICAP "OPTIONS"メソッドは、ICAP クライアントが ICAP サーバから設定情報を取得す
   るために使用される。このメソッドで、ICAP クライアントは特定の ICAP リソースへ
   リクエストを送信し、URI で指定したサービスの固有オプションをレスポンスとして
   受け取る。すべての OPTIONS リクエストに対して、サーバ共通のオプション (つまり、
   すべてのサービスで適用される) を返すこともできる (MAY) 。

4.10.1 OPTIONS リクエスト

   OPTIONS メソッドは 4.3.2章で説明されるリクエストラインで構成され、次の例のよ
   うになる。

   OPTIONS icap://icap.server.net/sample-service ICAP/1.0
   User-Agent: ICAP-client-XYZ/1.001



Elson & Cerpa                Informational                     [Page 29]

RFC 3507                          ICAP                        April 2003


   4.3.1章や4.3.2章で説明される、他のヘッダも許可されている (Host など) 。

4.10.2 OPTIONS レスポンス

   OPTIONS レスポンスは、4.3.3章で説明されるステータスラインと、それに続くオプ
   ションの opt-body が後に続く一連のヘッダフィールド名と値のペアで構成される。
   値フィールドに複数の値を設定する場合はコンマで区切らなければいけない (MUST) 。
   opt-body が OPTIONS レスポンスに存在する場合、Opt-body-type ヘッダに opt-body
   のフォーマットを記述する。

   このバージョンのプロトコルでサポートされている OPTIONS ヘッダは次のとおりであ
   る。

   -- Methods:

      サービスでサポートしているメソッド。このヘッダは OPTIONS レスポンスに使用
      しなければいけない (MUST) 。OPTIONS メソッドは、すべての ICAP サーバ実装で
      サポートされなければいけない (MUST) ため、Methods の一覧に存在してはいけな
      い (MUST NOT) 。各サービスは異なる URI で、OPTIONS に加えて1つのメソッドだ
      けをサポートするべきである (6.4章を参照）。

      使用例:
      Methods: RESPMOD

   -- Service:

      ベンダーと製品名の説明。このヘッダを OPTIONS レスポンスに使用してもよい
      (MAY) 。

      使用例 :
      Service: XYZ Technology Server 1.0

   -- ISTag:

      詳細は4.7章を参照。このヘッダは OPTIONS レスポンスに使用しなければいけない
       (MUST) 。

      使用例:
      ISTag: "5BDEEEA9-12E4-2"

   -- Encapsulated:

      このヘッダは OPTIONS レスポンスに使用しなければいけない (MUST) 。4.4章を参
      照。

      使用例:
      Encapsulated: opt-body=0



Elson & Cerpa                Informational                     [Page 30]

RFC 3507                          ICAP                        April 2003


   -- Opt-body-type:

      opt-body のフォーマットを識別するトークン。(有効な opt-body タイプは ICAP
      では定義していない。) opt-body タイプが存在する場合にのみ、このヘッダは
      OPTIONS レスポンスに使用しなければいけない (MUST) 。

      使用例:
      Opt-body-type: XML-Policy-Table-1.0

   -- Max-Connections:

      サーバがサポートできる ICAP コネクションの最大数。このヘッダをOPTIONSレス
      ポンスに使用してもよい (MAY) 。

      使用例:
      Max-Connections: 1500

   -- Options-TTL:

      OPTIONS レスポンスが有効である時間 (秒) 。何も指定されていない場合、
      OPTIONS レスポンスは期限切れにならない。このヘッダを OPTIONS レスポンスに
      使用してもよい (MAY) 。Options-TTL が期限切れになると、ICAP クライアントは
      OPTIONS リクエストを再発行してもよい (MAY) 。

      使用例:
      Options-TTL: 3600

   -- Date:

      RFC 1123 準拠の日付/時刻文字列で指定されるサーバの時刻。このヘッダを
      OPTIONS レスポンスに使用してもよい (MAY) 。

      使用例:
      Date: Fri, 15 Jun 2001 04:33:55 GMT

   -- Service-ID:

      ICAP サービスを識別する短いラベル。これをヘッダ名の属性に使用してもよい
      (MAY) 。このヘッダを OPTIONS レスポンスに使用してもよい (MAY) 。

      使用例:
      Service-ID: xyztech



Elson & Cerpa                Informational                     [Page 31]

RFC 3507                          ICAP                        April 2003


   -- Allow:

      サーバが実装しているオプションの ICAP 機能リストを宣言するディレクティブ。
      このヘッダを OPTIONS レスポンスに使用してもよい (MAY) 。この文書では、ICAP
      サーバが 204 レスポンスをサポートしていることを示すため、"204"を指定してい
      る。

      使用例:
      Allow: 204

   -- Preview:

      プレビュー中に ICAP クライアントによって送信されるバイト数。このヘッダを
      OPTIONS レスポンスに使用してもよい (MAY) 。

      使用例:
      Preview: 1024

   -- Transfer-Preview:

      全体を送信する前に ICAP サーバでプレビューするべきファイル拡張子のリスト。
      このヘッダを OPTIONS レスポンスに使用してもよい (MAY) 。複数のファイル拡張
      子の値はコンマで区切る必要がある。ワイルドカード値"*"は、他の Transfer-*
      ヘッダで指定されていないすべてのファイル拡張子に対するデフォルトの動作を指
      定する (下記参照) 。

      使用例:
      Transfer-Preview: *

   -- Transfer-Ignore:

      ICAPサーバへ送信するべきではない (NOT) ファイル拡張子のリスト。このヘッダ
      を OPTIONS レスポンスに使用してもよい (MAY) 。複数のファイル拡張子の値はコ
      ンマで区切る必要がある。

      使用例:
      Transfer-Ignore: html

   -- Transfer-Complete:

      ICAPサーバへ (プレビューなしで) 全体が送信されるべきファイル拡張子のリスト。
      このヘッダを OPTIONS レスポンスに使用してもよい (MAY) 。複数のファイル拡張
      子の値はコンマで区切る必要がある。

      使用例:
      Transfer-Complete: asp, bat, exe, com, ole



Elson & Cerpa                Informational                     [Page 32]

RFC 3507                          ICAP                        April 2003


   注意: Transfer-* のいずれかを送信する場合、それらのうちの1つに、デフォルトを
   指定するためのワイルドカード値"*"を含めなければいけない (MUST) 。Transfer-*
   が送信されない場合、すべてのレスポンスは (プレビューなしで) 全体が送信される。

4.10.3 OPTIONS 用例

   Example 5 は、ICAP クライアントが提供されるサービスの構成情報を取得するため、
   icap.server.net/sample-service という名前の ICAP サービスに OPTIONS リクエス
   トを送信する。

   ICAP OPTIONS Example 5 - ICAP OPTIONS リクエスト
   ----------------------------------------------------------------
   OPTIONS icap://icap.server.net/sample-service ICAP/1.0
   Host: icap.server.net
   User-Agent: BazookaDotCom-ICAP-Client-Library/2.3

   ----------------------------------------------------------------

   ICAP OPTIONS Example 5 - ICAP OPTIONS レスポンス
   ----------------------------------------------------------------
   ICAP/1.0 200 OK
   Date: Mon, 10 Jan 2000  09:55:21 GMT
   Methods: RESPMOD
   Service: FOO Tech Server 1.0
   ISTag: "W3E4R7U9-L2E4-2"
   Encapsulated: null-body=0
   Max-Connections: 1000
   Options-TTL: 7200
   Allow: 204
   Preview: 2048
   Transfer-Complete: asp, bat, exe, com
   Transfer-Ignore: html
   Transfer-Preview: *

   ----------------------------------------------------------------

5.  キャッシング

   サロゲートが HTTP レスポンスをキャッシュするのと同様に、ICAP クライアントは
   ICAP サーバのレスポンスをキャッシュしてもよい (MAY) 。HTTP と同様に、ICAP ク
   ライアントは常に成功したレスポンス (4.8.2章と4.9.2章を参照) をキャッシュエン
   トリとして保存してもよく (MAY) 、新鮮であれば検証なしでそれを返してもよい
   (MAY) 。ICAP サーバは HTTP/1.1 [4] で説明されているキャッシュディレクティブを
   使用する。

   リクエストの変更 (Request Modification) モードでは、ICAP サーバは ICAP レスポ
   ンスの ICAP ヘッダセクションにキャッシュディレクティブを含めてもよい (MAY)
   (ICAP メッセージボディのカプセル化された HTTP リクエストには含めない (NOT) ) 。
   レスポンスの変更 (Response Modification) モードでは、ICAP サーバはカプセル化
   した HTTP レスポンスにある HTTP キャッシュディレクティブを追加または修正して
   もよい (MAY) (ICAP ヘッダセクションではない (NOT) ) 。よって、ICAP クライアン
   トは、REQMOD の場合は ICAP ヘッダ内の、RESPMOD の場合はカプセル化された HTTP
   レスポンス内のキャッシュディレクティブを探すべきである (SHOULD) 。



Elson & Cerpa                Informational                     [Page 33]

RFC 3507                          ICAP                        April 2003


   レスポンスの変更 (Response Modification) モードのように、ICAP サーバがオリジ
   ンサーバが作成したオブジェクトの変更バージョンを返す場合、ICAP で変更されたオ
   ブジェクトの有効期限は、元のオブジェクトの有効期限より長くてはいけない (MUST
   NOT) 。つまり、ICAP サーバはオリジンサーバのオブジェクトの有効期限を延長して
   はいけない (MUST NOT) が、短縮してもよい (MAY) 。

   リクエストの変更 (Request Modification) モードのように、ICAP サーバが ICAP レ
   スポンスの信頼できる送信元である場合は、ICAP サーバの有効期限ポリシーに制限は
   ない。

   ISTag レスポンスヘッダは、クライアントにキャッシュのヒントを提供するためにも
   使用できることに留意すること。これについては、4.7章を参照。

6.  実装上の注意事項

6.1  ベクトル化ポイント

   ICAP プロトコルの定義自体は、2つの異なる改編契機、つまりリクエストの変更 (お
   よびサティスファクション) とレスポンスの変更のみである。しかし実際には、ICAP
   クライアント実装では4つの異なる改編を区別する。

   1.  クライアントのリクエストの改編。これは、リクエストをクライアントから受信
       するたびに行われる改編である。また、リクエストを"キャッシュする前"に行わ
       れる改編である。現在キャッシュされているオブジェクトの状態などにより、こ
       のリクエストが (たとえば、キャッシュのディスクで処理されるのではなく) 実
       際にオリジンサーバに転送されるかが決まる。この改編の例は、クライアントご
       とに実行しなければならない特別なアクセス制御や認証サービスである。

   2.  オリジンサーバへの転送途中におけるリクエストの改編。この改編は、 (1) と同
       様にリクエストの改編だが、リクエストを実際にオリジンサーバへ転送する必要
       がある場合など、"キャッシュした後"のリクエストを示す。これらの改編のリク
       エストは、必ずしも特定のクライアントに固有のものではない。たとえば、特別
       なデバイスのための"Accept: "ヘッダの追加であり、これらの改編はおそらく多
       くのクライアントに適用できる。



Elson & Cerpa                Informational                     [Page 34]

RFC 3507                          ICAP                        April 2003


   3.  オリジンサーバから受信したレスポンスの改編。これは、オブジェクトが"キャッ
       シュされる前"の改編である。言い換えれば、これは、サロゲートがオブジェクト
       をキャッシュする前にそのオブジェクトに対して実行したい場合の改編である。
       改編されたオブジェクトは、その後多くのクライアントに提供されるだろう。こ
       の改編の例はウィルスチェックである。サロゲートは、キャッシュしたオブジェ
       クトをクライアントに提供するたびにではなく、キャッシュに入れる前に受信し
       たオリジンのレスポンスを一度ウィルスチェックしたいはずである。

   4.  サロゲートから受信し、クライアントへ返送するレスポンスの改編。(3) と同様
       に、この改編はレスポンスの改編であるが、クライアント固有である。たとえす
       べてのレスポンスがディスク上の同じキャッシュオブジェクトだとしても、オブ
       ジェクトをクライアントに提供するたびに必要な場合である。広告挿入は、この
       改編の典型例である。たとえば、めったに変更されない人気のある (キャッシュ
       された) オブジェクトについて、ディスクからクライアントに配信されるたびに
       別の広告を挿入する必要がある場合などである。タイプ (3) と (4) の改編の関
       係は、タイプ (2) と (1) の関係に類似していることに留意すること。

   これら4つの改編ポイントの区別は ICAP クライアント実装にとって重要であるが、
   ICAP プロトコル自体にとっては重要ではない。ICAP サーバにとっては、リクエスト
   はリクエストであり、どのポリシーで ICAP クライアントがリクエストを生成したか
   は関知しない。したがって、簡単のため、これら4つの契機を ICAP では明確にしてい
   ない。

6.2  アプリケーションレベルのエラー

   4章では相互運用性を確保するために実装間で標準化されなければいけない (MUST)
   "on the wire"プロトコルのエラーについて説明した。この章では、ICAP ソフトウェ
   アと、それらが実装されているクライアントおよびサーバとの間でやり取りされるエ
   ラーについて説明する。このようなエラーは実装依存であり、"箱の中 (within the
   box)"であるため必ずしも標準化する必要はないが、過去の実装経験に基づき将来の実
   装者へのアドバイスとしてここに提示する。



Elson & Cerpa                Informational                     [Page 35]

RFC 3507                          ICAP                        April 2003


   エラー名                                          値
   ====================================================
   ICAP_CANT_CONNECT                               1000
   ICAP_SERVER_RESPONSE_CLOSE                      1001
   ICAP_SERVER_RESPONSE_RESET                      1002
   ICAP_SERVER_UNKNOWN_CODE                        1003
   ICAP_SERVER_UNEXPECTED_CLOSE_204                1004
   ICAP_SERVER_UNEXPECTED_CLOSE                    1005

   1000 ICAP_CANT_CONNECT:
       "ICAP サーバに接続できない"。

       ICAP サーバがソケットに接続されていない。ICAP サーバが停止しているか、ソ
       ケットに接続されていない可能性がある。


   1001 ICAP_SERVER_RESPONSE_CLOSE:
       "ICAP サーバがレスポンスの読み取り中に接続を閉じた"。

       ICAP クライアントがすべてのボディデータを送信する前に、ICAP サーバが TCP
       接続を閉じた。

   1002 ICAP_SERVER_RESPONSE_RESET:
       "ICAP サーバがレスポンスの読み取り中に接続をリセットした"。

       ICAP クライアントがすべてのボディデータを送信する前に、ICAP サーバが TCP
       接続をリセットした。

   1003 ICAP_SERVER_UNKNOWN_CODE:
       "ICAP サーバが未知のレスポンスコードを送信した"。

       未知の ICAP レスポンスコード (4.x章を参照) を ICAP クライアントが受信した。

   1004 ICAP_SERVER_UNEXPECTED_CLOSE_204:
       "ICAP サーバが 204 で'Connection: close'ヘッダなしで接続を閉じた"。

       現在のトランザクション後に閉じるつもりなら、ICAP サーバは"Connection:
       close"ヘッダを送信しなければいけない (MUST) 。

   1005 ICAP_SERVER_UNEXPECTED_CLOSE:
       "ICAP クライアントがボディのプレビューを書き込んだため、ICAP サーバは接続
       を閉じた"。



Elson & Cerpa                Informational                     [Page 36]

RFC 3507                          ICAP                        April 2003


6.3  チャンク転送エンコーディングの使用

   簡略化のため、ICAP メッセージはカプセル化したボディセクションに HTTP/1.1 [4]
   で定義されている"チャンク"転送エンコーディングを使用しなければいけない (MUST)
    。ICAPクライアント実装は受信オブジェクトを"その場で"受信した相手の転送エン
    コーディングからチャンク転送エンコーディングに変換する必要がある。ただし、変
    換は簡単である。

   -  "Content-Length"ヘッダを使用して到着するオブジェクトの場合、Content-Length
      ヘッダに示されているのと同じサイズの大きなチャンクを1つ作成する。

   -  オブジェクトの最後を通知するための TCP クローズを使用して到着したオブジェ
      クトの場合、OS から読み取られた各受信バイトグループは、 (読み取られたバイ
      ト長の後にバイト自体を続けて書き込むことによって) チャンクに変換できる。

   -  チャンクエンコーディングを使用して到着したオブジェクトの場合は、(再チャン
      クなしで) そのまま再送信できる。

6.4  個別サービス用の個別 URI

   ICAP サーバは、サービスがメソッドに基づいて理論的に区別されるとしても、提供す
   る各サービスに固有の URI を割り当てるべきである (SHOULD) 。言い換えれば、たと
   えそれらが概念的に同じことをしていても、REQMOD と RESPMOD のサービスは決して
   同じ URI を持つべきではない。

   これは ICAP における、HTTP で同じ URI に対して GET および POST を実行して異な
   る結果となる場合がある状況と似ている。このたぐいの URI のオーバーロードは混乱
   を招くだけであり、避けるべきである。

7.  セキュリティ上の考慮事項

7.1  認証

   ICAP の認証は、RFC 2617 で指定されている HTTP のプロキシ認証に非常に似ている。
   具体的には、次の規則が適用される。

   -  WWW-Authenticate チャレンジとレスポンスは、クライアント (ユーザ) とオリジ
      ンサーバ間のエンドツーエンド認証用である。プロキシとして、ICAP クライアン
      トと ICAP サーバはこれらのヘッダを変更せずに転送しなければいけない (MUST) 。



Elson & Cerpa                Informational                     [Page 37]

RFC 3507                          ICAP                        April 2003


   -  ICAP クライアントと ICAP サーバ間で認証が必要な場合、RFC 2617 で説明されて
      いるホップバイホッププロキシ認証を使用しなければいけない (MUST) 。

   ユーザ (ICAP クライアントではなく) が ICAP サービスにアクセスする権利を持つア
   プリケーションが存在する可能性がある。このバージョンのプロトコルでは、ICAP ク
   ライアントと ICAP サーバは同じ管理ドメインの下にあり、単一の信頼ドメインに含
   まれていると想定している。そのため、それらの場合でも、ユーザは ICAP クライア
   ント (ユーザの観点からはサロゲートである) に対して自分自身を認証するだけで十
   分であると想定している。このタイプの認証は、RFC 2617 で説明されているプロキシ
   認証でもある。

   この標準化によりユーザが ICAP サーバに対して直接認証する方法を明示的に除外し
   ているため、上記のように、ICAP クライアントが仲介しなければいけない (MUST) 。

7.2  暗号化

   ICAP ユーザは、ICAP メッセージがデフォルトでは転送用に暗号化されていないこと
   に注意すること。リンク層またはネットワーク層に他の暗号化形式がない場合、盗聴
   者は ICAP クライアントとサーバ間の暗号化されていないトランザクションを記録で
   きる場合がある。4.3.1章で説明したように、Upgrade ヘッダを使用して、ICAP コネ
   クション [5] のトランスポート層セキュリティをネゴシエートしてもよい (MAY) 。

   また、クライアントとオリジンサーバ間のエンドツーエンドの暗号化は、サロゲート
   などの仲介者による付加価値サービスの使用を妨げる可能性が高いことに注意するこ
   と。クライアントのメッセージを復号できない ICAP サーバは、当然、それのメッ
   セージに対して変換を実行できない。

7.3  サービス検証

   通常の HTTP サロゲートは、正常に動作している場合、それらを通過するメッセージ
   のエンドツーエンドの意味論に影響を与えない。これは、サロゲートが正しく機能し
   ていることを検証するための明確に定義された基準を形成している。サロゲート通過
   前とサロゲート通過後のメッセージは同じに見えるはずである。

   対照的に、ICAP はオリジンサーバからユーザへの途中でメッセージの意味論に変更を
   引き起こすことを目的としており、正しく動作しているサロゲートの基準の定義が簡
   単ではなくなった。これにより、ICAP サービスの検証が大幅に困難になる。不適切な
   改編は、改編されていないコンテンツには存在しなかったセキュリティの脆弱性につ
   ながる可能性がある。



Elson & Cerpa                Informational                     [Page 38]

RFC 3507                          ICAP                        April 2003


8.  動機と設計の選択肢

   この章では、設計上の決定事項のいくつかを詳細に説明し、その背後にあるアイデア
   と動機について説明する。この章ではプロトコルの要件は定義していないが、これま
   での章で定義した要件の解明に繋がることを願っている。この章には、"法的拘束力
   (force of law) "が生じるのも、正式なプロトコル仕様の一部でもないものもある。

   一般的に、我々の基本理念は ICAP をジョブを行う可能な限り単純化したプロトコル
   にすることであるが、ただ単純なだけでは不十分である。代わりの (非プロトコル
   ベース) ソリューションが見つかった場合は、一部の機能を排除した。さらに、実装
   者の裁量でいくつかの問題を意図的に残しているため、相互運用性を損なうことはな
   いと考えている。

8.1  HTTP であるべきか、あらざるべきか

   ICAP は当初、HTTP 上で実行するように構築されたアプリケーション層プロトコルと
   して設計された。これはいくつかの理由で望ましいものであった。HTTP はコミュニ
   ティで十分に理解されており、ソフトウェアインフラストラクチャ (クライアント、
   サーバ、パーサなど) への多大な投資を享受している。我々の初期設計では、既存の
   Webサーバで実行される CGI スクリプトを使用して、ICAP サービスを簡単に実装でき
   るよう、既存の仕様の活用に焦点を当てていた。
   
   しかし、悪魔が (いつものように) 細部に宿ることが判明した。重要だと考えていた
   いくつかの機能は、HTTP で実装することは不可能であった。たとえば、ICAP クライ
   アントはメッセージボディの途中で"100 Continue"メッセージを停止して待つことが
   できるが、HTTP クライアントはヘッダとボディの間でのみ待機できる。さらに、サロ
   ゲートによる HTTP メッセージの特定の変換は正当 (および HTTP に対して無害) だ
   が、ICAP の"ヘッダ内ヘッダ"カプセル化およびその他の機能に問題を引き起こした。

   最終的に、HTTP から離れて新たな (ただし類似の) プロトコルを定義するより、ICAP
   を HTTP に適合させるための回避策のもつれの方が複雑で紛らわしいと判断した。

8.2  チャンク化の必須使用

   ICAP カプセル化ボディでは、3つの理由によりチャンク化が必須である。第一に、効
   率が重要であり、チャンクエンコーディングによりクライアントとサーバの両方がト
   ランスポート層のコネクションを開いたままにして、後で再利用できる。第二に、
   ICAP サーバ (およびその開発者) は、可能ならば"増分 (incremental) "レスポンス
   を生成し、ユーザが体感する遅延を軽減するように務めるべきである。チャンクエン
   コーディングは、この種の実装をサポートする唯一の方法である。最後に、単一のカ
   プセル化メカニズムに標準化することで、クライアントおよびサーバのソフトウェア
   で複数のメカニズムをサポートするために必要となる複雑さを回避する。これにより、
   特に4.5章で説明する"ボディプレビュー"機能において ICAP が簡素化される。



Elson & Cerpa                Informational                     [Page 39]

RFC 3507                          ICAP                        April 2003


   カプセル化ボディのチャンク化は必須だが、カプセル化ヘッダーはチャンク化しない。
   この決定には2つの理由がある。第一に、チャンク化された HTTP メッセージボディを
   ICAP メッセージにカプセル化する場合、ICAP クライアント (HTTP サーバ) は、チャ
   ンクの解除および再チャンク化することなく、HTTP クライアントからICAPサーバに直
   接コピーできる。第二に、多くのヘッダパーサの実装では、複数チャンクで構成され
   たヘッダの処理は困難である。この文書のドラフト版では、チャンク境界がヘッダ内
   に無いことを義務付けていた。明確にするために、カプセル化ヘッダのチャンク化は
   単に許可しない。

8.3  Encapsulated ヘッダでの null-body ディレクティブの使用

   ICAP メッセージのカプセル化されたヘッダ部にチャンク転送エンコードを使用しない
   ことについて不利な点がある。それは、パーサがバッファの割り当てなどのための
   ヘッダデータのサイズを事前に知ることができない点である。ICAP は、8.2章で説明
   した理由により、ヘッダ部のチャンク化を許可しない。これを補うため、"null-body"
   ディレクティブにより、チャンク化されていないにもかかわらず、最終ヘッダの長さ
   を決定できる。

9.  参照文献

   [1]  Berners-Lee, T., Fielding, R. and L. Masinter, "Uniform Resource
        Identifiers (URI): Generic Syntax and Semantics", RFC 2396,
        August 1998.

   [2]  Bradner, S., "Key words for use in RFCs to Indicate Requirement
        Levels", BCP 14, RFC 2119, March 1997.

   [3]  Resnick, P., "Internet Message Format", RFC 2822, April 2001.

   [4]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L.,
        Leach, P. and T. Berners-Lee, "Hypertext Transfer Protocol --
        HTTP/1.1", RFC 2616, June 1999.

   [5]  Khare, R. and S. Lawrence, "Upgrading to TLS Within HTTP/1.1",
        RFC 2817, May 2000.



Elson & Cerpa                Informational                     [Page 40]

RFC 3507                          ICAP                        April 2003


10.  貢献者

   ICAP は、John Martin と Peter Danzig による独自のアイデアに基づいている。以下
   の貢献者 (過去および現在) を含む多くの個人および組織が ICAP の開発に貢献した。

   Lee Duggs
   Network Appliance, Inc.
   495 East Java Dr.
   Sunnyvale, CA 94089 USA

   Phone: (408) 822-6000
   EMail: lee.duggs@netapp.com

   Paul Eastham
   Network Appliance, Inc.
   495 East Java Dr.
   Sunnyvale, CA 94089 USA

   Phone: (408) 822-6000
   EMail: eastham@netapp.com

   Debbie Futcher
   Network Appliance, Inc.
   495 East Java Dr.
   Sunnyvale, CA 94089 USA

   Phone: (408) 822-6000
   EMail: deborah.futcher@netapp.com

   Don Gillies
   Network Appliance, Inc.
   495 East Java Dr.
   Sunnyvale, CA 94089 USA

   Phone: (408) 822-6000
   EMail: gillies@netapp.com

   Steven La
   Network Appliance, Inc.
   495 East Java Dr.
   Sunnyvale, CA 94089 USA

   Phone: (408) 822-6000
   EMail: steven.la@netapp.com



Elson & Cerpa                Informational                     [Page 41]

RFC 3507                          ICAP                        April 2003


   John Martin
   Network Appliance, Inc.
   495 East Java Dr.
   Sunnyvale, CA 94089 USA

   Phone: (408) 822-6000
   EMail: jmartin@netapp.com

   Jeff Merrick
   Network Appliance, Inc.
   495 East Java Dr.
   Sunnyvale, CA 94089 USA

   Phone: (408) 822-6000
   EMail: jeffrey.merrick@netapp.com

   John Schuster
   Network Appliance, Inc.
   495 East Java Dr.
   Sunnyvale, CA 94089 USA

   Phone: (408) 822-6000
   EMail: john.schuster@netapp.com

   Edward Sharp
   Network Appliance, Inc.
   495 East Java Dr.
   Sunnyvale, CA 94089 USA

   Phone: (408) 822-6000
   EMail: edward.sharp@netapp.com

   Peter Danzig
   Akamai Technologies
   1400 Fashion Island Blvd
   San Mateo, CA 94404 USA

   Phone: (650) 372-5757
   EMail: danzig@akamai.com

   Mark Nottingham
   Akamai Technologies
   1400 Fashion Island Blvd
   San Mateo, CA 94404 USA

   Phone: (650) 372-5757
   EMail: mnot@akamai.com



Elson & Cerpa                Informational                     [Page 42]

RFC 3507                          ICAP                        April 2003


   Nitin Sharma
   Akamai Technologies
   1400 Fashion Island Blvd
   San Mateo, CA 94404 USA

   Phone: (650) 372-5757
   EMail: nitin@akamai.com

   Hilarie Orman
   Novell, Inc.
   122 East 1700 South
   Provo, UT 84606 USA

   Phone: (801) 861-7021
   EMail: horman@novell.com

   Craig Blitz
   Novell, Inc.
   122 East 1700 South
   Provo, UT 84606 USA

   Phone: (801) 861-7021
   EMail: cblitz@novell.com

   Gary Tomlinson
   Novell, Inc.
   122 East 1700 South
   Provo, UT 84606 USA

   Phone: (801) 861-7021
   EMail: garyt@novell.com

   Andre Beck
   Bell Laboratories / Lucent Technologies
   101 Crawfords Corner Road
   Holmdel, New Jersey 07733-3030

   Phone: (732) 332-5983
   EMail: abeck@bell-labs.com

   Markus Hofmann
   Bell Laboratories / Lucent Technologies
   101 Crawfords Corner Road
   Holmdel, New Jersey 07733-3030

   Phone: (732) 332-5983
   EMail: hofmann@bell-labs.com



Elson & Cerpa                Informational                     [Page 43]

RFC 3507                          ICAP                        April 2003


   David Bryant
   CacheFlow, Inc.
   650 Almanor Avenue
   Sunnyvale, California 94086

   Phone: (888) 462-3568
   EMail: david.bryant@cacheflow.com



Elson & Cerpa                Informational                     [Page 44]

RFC 3507                          ICAP                        April 2003

付録 A   ICAP メッセージの BNF 文法

   この文法は、HTTP/1.1 仕様 ([4]の2.1章を参照) で使用されるものと同様の拡張
   Backus-Naur 形式 (BNF) で指定される。実装者は、この仕様を理解するために表記法
   に精通する必要がる。

   多くのヘッダの値 (注記がある場合) は、HTTP/1.1と全く同じ文法と意味論である。
   ここではそれらの文法は再掲載しない。

   ICAP-Version = "ICAP/1.0"

   ICAP-Message = Request | Response

   Request      = Request-Line
                  *(Request-Header CRLF)
                  CRLF
                  [ Request-Body ]

   Request-Line = Method SP ICAP_URI SP ICAP-Version CRLF

   Method       = "REQMOD"         ; Section 4.8
                | "RESPMOD"        ; Section 4.9
                | "OPTIONS"        ; Section 4.10
                | Extension-Method ; Section 4.3.2

   Extension-Method = token

   ICAP_URI = Scheme ":" Net_Path [ "?" Query ]  ; Section 4.2

   Scheme      = "icap"

   Net_Path    = "//" Authority [ Abs_Path ]

   Authority   = [ userinfo "@" ] host [ ":" port ]


   Request-Header     = Request-Fields ":" [ Generic-Field-Value ]

   Request-Fields     = Request-Field-Name
                      | Common-Field-Name

   ; Header fields specific to requests
   Request-Field-Name = "Authorization"   ; Section 4.3.2
                      | "Allow"           ; Section 4.3.2
                      | "From"            ; Section 4.3.2
                      | "Host"            ; Section 4.3.2
                      | "Referer"         ; Section 4.3.2



Elson & Cerpa                Informational                     [Page 45]

RFC 3507                          ICAP                        April 2003


                      | "User-Agent"      ; Section 4.3.2
                      | "Preview"         ; Section 4.5

   ; Header fields common to both requests and responses
   Common-Field-Name  = "Cache-Control"   ; Section 4.3.1
                      | "Connection"      ; Section 4.3.1
                      | "Date"            ; Section 4.3.1
                      | "Expires"         ; Section 4.3.1
                      | "Pragma"          ; Section 4.3.1
                      | "Trailer"         ; Section 4.3.1
                      | "Upgrade"         ; Section 4.3.1
                      | "Encapsulated"    ; Section 4.4
                      | Extension-Field-Name   ; Section 4.3

   Extension-Field-Name  = "X-" token

   Generic-Field-Value   = *( Generic-Field-Content | LWS )
   Generic-Field-Content = <the OCTETs making up the field-value
                            and consisting of either *TEXT or
                            combinations of token, separators,
                            and quoted-string>

   Request-Body = *OCTET   ; See Sections 4.4 and 4.5 for semantics

   Response    = Status-Line
                 *(Response-Header CRLF)
                 CRLF
                 [ Response-Body ]

   Status-Line = ICAP-Version SP Status-Code SP Reason-Phrase CRLF

   Status-Code = "100"  ; Section 4.5
               | "101"  ; Section 10.1.2 of [4]
               | "200"  ; Section 10.2.1 of [4]
               | "201"  ; Section 10.2.2 of [4]
               | "202"  ; Section 10.2.3 of [4]
               | "203"  ; Section 10.2.4 of [4]
               | "204"  ; Section 4.6
               | "205"  ; Section 10.2.6 of [4]
               | "206"  ; Section 10.2.7 of [4]
               | "300"  ; Section 10.3.1 of [4]
               | "301"  ; Section 10.3.2 of [4]
               | "302"  ; Section 10.3.3 of [4]
               | "303"  ; Section 10.3.4 of [4]
               | "304"  ; Section 10.3.5 of [4]
               | "305"  ; Section 10.3.6 of [4]
               | "306"  ; Section 10.3.7 of [4]
               | "307"  ; Section 10.3.8 of [4]



Elson & Cerpa                Informational                     [Page 46]

RFC 3507                          ICAP                        April 2003


               | "400"  ; Section 4.3.3
               | "401"  ; Section 10.4.2 of [4]
               | "402"  ; Section 10.4.3 of [4]
               | "403"  ; Section 10.4.4 of [4]
               | "404"  ; Section 4.3.3
               | "405"  ; Section 4.3.3
               | "406"  ; Section 10.4.7 of [4]
               | "407"  ; Section 10.4.8 of [4]
               | "408"  ; Section 4.3.3
               | "409"  ; Section 10.4.10 of [4]
               | "410"  ; Section 10.4.11 of [4]
               | "411"  ; Section 10.4.12 of [4]
               | "412"  ; Section 10.4.13 of [4]
               | "413"  ; Section 10.4.14 of [4]
               | "414"  ; Section 10.4.15 of [4]
               | "415"  ; Section 10.4.16 of [4]
               | "416"  ; Section 10.4.17 of [4]
               | "417"  ; Section 10.4.18 of [4]
               | "500"  ; Section 4.3.3
               | "501"  ; Section 4.3.3
               | "502"  ; Section 4.3.3
               | "503"  ; Section 4.3.3
               | "504"  ; Section 10.5.5 of [4]
               | "505"  ; Section 4.3.3
               | Extension-Code

   Extension-Code = 3DIGIT

   Reason-Phrase = *<TEXT, excluding CR, LF>

   Response-Header     = Response-Fields ":" [ Generic-Field-Value ]

   Response-Fields     = Response-Field-Name
                       | Common-Field-Name

   Response-Field-Name = "Server"         ; Section 4.3.3
                       | "ISTag"          ; Section 4.7

   Response-Body = *OCTET  ; See Sections 4.4 and 4.5 for semantics



Elson & Cerpa                Informational                     [Page 47]

RFC 3507                          ICAP                        April 2003


著者のアドレス

   Jeremy Elson
   University of California Los Angeles
   Department of Computer Science
   3440 Boelter Hall
   Los Angeles CA 90095

   Phone: (310) 206-3925
   EMail: jelson@cs.ucla.edu


   Alberto Cerpa
   University of California Los Angeles
   Department of Computer Science
   3440 Boelter Hall
   Los Angeles CA 90095

   Phone: (310) 206-3925
   EMail: cerpa@cs.ucla.edu


   ICAP discussion currently takes place at
           icap-discussions@yahoogroups.com.
   For more information, see
           http://groups.yahoo.com/group/icap-discussions/.



Elson & Cerpa                Informational                     [Page 48]

RFC 3507                          ICAP                        April 2003


著作権表示全文

   Copyright (C) The Internet Society (2003).  All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.

   The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assigns.

   This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.

Acknowledgement

   Funding for the RFC Editor function is currently provided by the
   Internet Society.



Elson & Cerpa                Informational                     [Page 49]

